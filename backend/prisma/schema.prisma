// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String         @unique
  password         String
  role             Role
  profile          Profile?
  vendorStore      VendorStore?
  orders           Order[]
  cart             Cart?
  reviews          Review[]
  messagesSent     Message[]      @relation("MessagesSent")
  messagesReceived Message[]      @relation("MessagesReceived")
  notifications    Notification[]
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  address  String?
  phone    String?
  imageUrl String?
  userId   String  @unique @db.ObjectId
  user     User    @relation(fields: [userId], references: [id])
}

model VendorStore {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  logo     String?
  ownerId  String    @unique @db.ObjectId
  owner    User      @relation(fields: [ownerId], references: [id])
  products Product[]
}

model Product {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String          @db.ObjectId
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  vendorId    String          @db.ObjectId
  vendor      VendorStore     @relation(fields: [vendorId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  OrderItem   OrderItem[]
  CartItem    CartItem[]
}

model ProductCategory {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  parentId       String?           @db.ObjectId
  parentCategory ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories  ProductCategory[] @relation("CategoryHierarchy")
  products       Product[]
}

model ProductImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @unique @db.ObjectId
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  isRead    Boolean  @default(false)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String   @db.ObjectId
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiverId String   @db.ObjectId
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
